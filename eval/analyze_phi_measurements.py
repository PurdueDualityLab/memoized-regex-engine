# -*- coding: utf-8 -*-
"""analyze-phi-measurements.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17k-4omC6uW46Hbo36iQ9U78wRYyxbJ87

# Mount your drive to access data
"""

try:
  import google.colab
  IN_COLAB = True
  print("In Google Colab")
except:
  IN_COLAB = False
  print("Not in Google Colab")

if IN_COLAB:
  from google.colab import drive
  drive.mount('/content/gdrive')

"""# Analyses for the Regex Optimization project

### Imports
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import json
import re
import itertools
import pandas as pd
import numpy as np
import scipy.stats as stats
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.transforms as transforms

sns.set_style('whitegrid')
# %matplotlib inline

pd.set_option('display.max_columns', 30)

"""## Globals"""

ANALYSIS_ROOT_GOOGLE = os.path.join(os.sep, 'content', 'gdrive', 'Shared drives', 'Regexes and REDOS', 'Memoization')

if IN_COLAB:
  ANALYSIS_ROOT = ANALYSIS_ROOT_GOOGLE
else:
  ANALYSIS_ROOT = '' # Must run in the right directory

DATA_PATH = os.path.join(ANALYSIS_ROOT, 'data')
FIG_PATH = os.path.join(ANALYSIS_ROOT, 'figs')
FIG_FILE_FORMAT = 'pdf'

# Create fig directory structure
try:
  os.mkdir(os.path.join(FIG_PATH))
except:
  pass

"""## Load data"""

def loadNDJSON(filepath):
    dat = []
    with open(filepath, 'r') as infile:
        for line in infile:
            d = json.loads(line)
            dat.append(d)
    return dat
            
allFile = os.path.join(DATA_PATH, 'LF-phiMeasurements.json')
allFile = os.path.join(DATA_PATH, 'LF-phiMeasurements-060420.json')
allFile = os.path.join(DATA_PATH, 'LF-phiMeasurements-091520.json')
allFile = os.path.join(DATA_PATH, 'LF-phiMeasurements-091620.json')
allFile = os.path.join(DATA_PATH, 'LF-phiMeasurements-091620-AZz.json')
allFile = os.path.join(DATA_PATH, 'LF-phiMeasurements-091720.json')

slFile = os.path.join(DATA_PATH, 'sl-phiMeasurements.json')
slFile = os.path.join(DATA_PATH, 'SL-phiMeasurements-091620-AZz.json')
slFile = os.path.join(DATA_PATH, 'SL-phiMeasurements-091720.json')

print('Loading "all regexes" measurements from {}'.format(allFile))
allReg = loadNDJSON(allFile)
print('Loaded %d measurements for "all" regexes' % (len(allReg)))

print('Loading "SL regexes" measurements from {}'.format(slFile))
slReg = loadNDJSON(slFile)
print('Loaded %d measurements for "SL" regexes' % (len(slReg)))

"""## Munge into DF"""

## Raw values
INCLUDE_MEMO_LOOP = True

measure2name = {
    'full memoization':      r'$|Q|$',
    'selective: indeg>1':    r'$|Q_{in-deg>1}|$',
}
if INCLUDE_MEMO_LOOP:
  measure2name['selective: loop'] = r'$|Q_{ancestor}|$'

rows = []
for regexType, measurements in [("All", allReg), ("Super-linear", slReg)]:
  for dat in measurements:
    for measure, name in measure2name.items():
      rows += [
             [regexType, measure2name[measure], dat['policy2nSelectedVertices'][measure]]
      ]

dfRaw = pd.DataFrame(
    data=rows,
    columns=['Regex type', 'Measure', 'Value'],
    )

## Ratios
INCLUDE_LOOP2INDEG = False
rat2name = {
    'indeg2Q':    r'$\frac{|Q_{in-deg>1}|}{|Q|}$',
    'loop2Q':     r'$\frac{|Q_{ancestor}|}{|Q|}$',
    'loop2indeg': r'$\frac{|Q_{ancestor}|}{|Q_{in-deg>1}|}$',
}
rows = []
for regexType, measurements in [("All", allReg), ("SL", slReg)]:
  for dat in measurements:
    rat1 = dat['policy2nSelectedVertices']['selective: indeg>1'] / dat['policy2nSelectedVertices']['full memoization']
    rows += [[regexType, rat2name['indeg2Q'], rat1]]
    
    rat2 = dat['policy2nSelectedVertices']['selective: loop']     / dat['policy2nSelectedVertices']['full memoization']
    rows += [[regexType, rat2name['loop2Q'], rat2]]
    
    if INCLUDE_LOOP2INDEG:
      if dat['policy2nSelectedVertices']['selective: indeg>1'] > 0:
        rat3 = dat['policy2nSelectedVertices']['selective: loop']     / dat['policy2nSelectedVertices']['selective: indeg>1']
        rows += [[regexType, rat2name['loop2indeg'], rat3]]
dfRatios = pd.DataFrame(data=rows, columns=['Regex type', 'Measure', 'Value'])

"""## Summarize DF"""

pd.set_option('display.max_columns', 30)
print("\n*******\n\n  Summary of raw values:\n\n")
print(dfRaw.groupby(['Regex type', 'Measure']).describe(percentiles=[0.01, 0.05, 0.1, .25, .5, .75, 0.9, 0.95, 0.99]))

print("\n*******\n\n  Summary of ratios:\n\n")
print(dfRatios.groupby(['Regex type', 'Measure']).describe(percentiles=[0.01, 0.05, 0.1, .25, .5, .75, 0.9, 0.95, 0.99]))

"""## Plot"""

DISTINGUISH_SL = True

font = {'family' : 'normal',
        'weight' : 'normal',
        'size'   : 14}
matplotlib.rc('font', **font)
matplotlib.rc('text.latex', preamble=r'\usepackage{sfmath}')
matplotlib.rc('mathtext', fontset='stix')

plt.figure(1)
rawPlt_whis = [1,99]
rawPlt_showfliers = False
rawPlt_fname = os.path.join(FIG_PATH, 'vertex-set-sizes-whis{}-{}-fliers{}.{}'.format(rawPlt_whis[0], rawPlt_whis[1], rawPlt_showfliers, FIG_FILE_FORMAT))
hue = "Regex type" if DISTINGUISH_SL else None
ax = sns.boxplot(x="Measure", y="Value", hue=hue, data=dfRaw,
                 #width=1.0,
                 whis=rawPlt_whis, showfliers=rawPlt_showfliers
                #, palette="Set3"
                 )
plt.title('Sizes of selected vertex-sets', fontsize=20)
plt.xticks(fontsize=20)
plt.yticks(fontsize=20)
plt.tight_layout()
print("Saving to {}".format(rawPlt_fname))
plt.savefig(fname=rawPlt_fname, bbox_inches='tight')

plt.figure(2)
ratiosPlt_whis = [1,99]
ratiosPlt_showfliers = False
ratiosPlt_fname = os.path.join(FIG_PATH, 'vertex-sizes-ratios-whis{}-{}-fliers{}.{}'.format(ratiosPlt_whis[0], ratiosPlt_whis[1], ratiosPlt_showfliers, FIG_FILE_FORMAT))
ax = sns.boxplot(x="Measure", y="Value", hue=hue, data=dfRatios,
                 #width=1.0,
                 whis=ratiosPlt_whis, showfliers=ratiosPlt_showfliers,
                 )
plt.title('Space reduction via selective memoization', fontsize=20)
plt.xticks(fontsize=24)
plt.yticks(fontsize=16)
print("Saving to {}".format(ratiosPlt_fname))
plt.savefig(fname=ratiosPlt_fname, bbox_inches='tight')
